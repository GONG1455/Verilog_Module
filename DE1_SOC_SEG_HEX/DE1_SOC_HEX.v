
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE1_SOC_HEX(

	//////////// CLOCK //////////
	input 		          		CLOCK_50,
	input						rst_n,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// KEY //////////
	input 		     [3:1]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

wire	[3:0]	iDIG0,iDIG1,iDIG2,iDIG3,iDIG4,iDIG5;

assign		iDIG5	=	4'h0;		
assign		iDIG4	=	4'h1;
assign		iDIG3	=	4'h2;
assign		iDIG2	=	4'h3;
assign		iDIG1	=	4'h4;
assign		iDIG0	=	4'h5;

//=======================================================
//  Structural coding
//=======================================================

DE1_SOC_SEG_HEX DE1_SOC_SEG_HEX0
(
	.clk		(	CLOCK_50		),
	.rst_n		(	rst_n			),		
	.iDIG		(	iDIG0			),		// input [3:0] iDIG_sig
	.oHEX_D		(	HEX0			) 		// output [6:0] oHEX_D_sig
);

DE1_SOC_SEG_HEX DE1_SOC_SEG_HEX1
(
	.clk		(	CLOCK_50		),
	.rst_n		(	rst_n			),
	.iDIG		(	iDIG1			) ,		// input [3:0] iDIG_sig
	.oHEX_D		(	HEX1			) 		// output [6:0] oHEX_D_sig
);


DE1_SOC_SEG_HEX DE1_SOC_SEG_HEX2
(
	.clk		(	CLOCK_50		),
	.rst_n		(	rst_n			),
	.iDIG		(	iDIG2			) ,		// input [3:0] iDIG_sig
	.oHEX_D		(	HEX2			) 		// output [6:0] oHEX_D_sig
);

DE1_SOC_SEG_HEX DE1_SOC_SEG_HEX3
(
	.clk		(	CLOCK_50		),
	.rst_n		(	rst_n			),
	.iDIG		(	iDIG3			) ,		// input [3:0] iDIG_sig
	.oHEX_D		(	HEX3			) 		// output [6:0] oHEX_D_sig
);

DE1_SOC_SEG_HEX DE1_SOC_SEG_HEX4
(
	.clk		(	CLOCK_50		),
	.rst_n		(	rst_n			),
	.iDIG		(	iDIG4			) ,		// input [3:0] iDIG_sig
	.oHEX_D		(	HEX4			) 		// output [6:0] oHEX_D_sig
);

DE1_SOC_SEG_HEX DE1_SOC_SEG_HEX5
(
	.clk		(	CLOCK_50		),
	.rst_n		(	rst_n			),
	.iDIG		(	iDIG5			) ,		// input [3:0] iDIG_sig
	.oHEX_D		(	HEX5			) 		// output [6:0] oHEX_D_sig
);


endmodule
